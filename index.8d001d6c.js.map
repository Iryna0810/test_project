{"mappings":"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","sources":["src/get_localstorage_info.js","src/genres.js","src/render_markup.js"],"sourcesContent":["import axios from 'axios';\nimport { renderMarkup } from './render_markup';\n\n// import './js/render-markup.js';\nconst STORAGE_KEY_WATCH = 'watched_id';\nconst STORAGE_KEY_QUEUE = 'queu';\nconst queueButton = document.querySelector('.js_queue');\nconst watchedButton = document.querySelector('.js_watched');\nconst galleryFilms = document.querySelector('.galleryfilms-js');\nconst nomoviesimages = document.querySelector('.start');\n\nconsole.log(nomoviesimages);\n\nconsole.log(galleryFilms);\nconsole.log(queueButton);\nconsole.log(watchedButton);\n\nclass ApiMovieSearch {\n  #BASE_URL = 'https://api.themoviedb.org/3/';\n  #API_KEY = '2bcb7fdd81c3309c5e646690433e3287';\n \n  constructor() {\n    this.page = 1;\n  }\n\n  async fetchMovies(film_Id) {\n    try {\n        return await axios.get(`https://api.themoviedb.org/3/movie/${film_Id}?api_key=${this.#API_KEY}`);\n        \n    } catch (err) {\n      throw new Error(err.message);\n    }\n  }\n}\n\nconst apiInfoMovies = new ApiMovieSearch();\n\nfunction handleGetWatchedFilms() {\n        galleryFilms.innerHTML = \"\";\n        const savedData = localStorage.getItem(STORAGE_KEY_WATCH);\n\n        nomoviesimages.classList.remove('is-hidden');\n    \n        if (queueButton.classList.contains('is-active')) {\n        queueButton.classList.remove('is-active');\n        }\n        watchedButton.classList.add('is-active');\n        watchedButton.classList.add('btn-active');\n       queueButton.classList.remove('btn-active');\n    \n    let datagenre_ids = [];\n    \n    let films = {\n        results: [],\n    };\n            if (savedData) {\n            try {\n            const filmData = JSON.parse(savedData);\n            // console.log(filmData);\n            filmData.map((id) => {\n                apiInfoMovies\n                    .fetchMovies(id)\n                    .then(({ data }) => {\n                        // console.log(data);\n                        nomoviesimages.classList.add('is-hidden');\n                        // data.genre_ids = data.genres;\n                        datagenre_ids = data.genres.map(genre => genre.id);\n                        data.genre_ids = datagenre_ids;\n                        console.log(datagenre_ids)\n\n                        films.results.push(data);\n                        // console.log(films);\n                    \n                        renderMarkup(films); \n                    \n                        })                                 \n                    .catch(err => {\n                        console.log(err)\n                    })\n            })\n            }\n        catch (error) {\n            console.error(\"Get state error: \", error.message);\n            }\n        }        \n};\n\nfunction handleGetQueueFilms() {\n        galleryFilms.innerHTML = \"\";\n        const savedData = localStorage.getItem(STORAGE_KEY_QUEUE);\n    \n    if (watchedButton.classList.contains('is-active')) {\n        watchedButton.classList.remove('is-active');\n    }\n    queueButton.classList.add('is-active');\n     \n        let films = {\n        results: [],\n    };\n\n    if (savedData) {\n        try {\n            const filmData = JSON.parse(savedData);\n            console.log(filmData);\n            \n            filmData.map((id) => {\n                apiInfoMovies\n                    .fetchMovies(id)\n                    .then(({ data }) => {\n                        console.log(data);\n                        data.genre_ids = data.genres;\n                        films.results.push(data);\n                        console.log(films);\n                    \n                        renderMarkup(films);\n                    \n                    })\n                    .catch(err => {\n                        console.log(err)\n                    })\n            })\n        }\n        catch (error) {\n            console.error(\"Get state error: \", error.message);\n    }\n        }   \n};\n\nwindow.addEventListener('load', handleGetWatchedFilms);\nwatchedButton.addEventListener('click', handleGetWatchedFilms);\nqueueButton.addEventListener('click', handleGetQueueFilms);\n\n","export const genres = {\n  28: 'Action',\n  12: 'Adventure',\n  16: 'Animation',\n  35: 'Comedy',\n  80: 'Crime',\n  99: 'Documentary',\n  18: 'Drama',\n  10751: 'Family',\n  14: 'Fantasy',\n  36: 'History',\n  27: 'Horror',\n  10402: 'Music',\n  9648: 'Mystery',\n  10749: 'Romance',\n  878: 'Science Fiction',\n  10770: 'TV Movie',\n  53: 'Thriller',\n  10752: 'War',\n  37: 'Western',\n};","import { genres } from \"./genres\";\n\n export function renderMarkup(films) {\n  const createdElements = films.results\n    .map(film => {\n      if (film.genre_ids.length <= 2) {\n        const cardFilm = `\n      <div class=\"film-card\" data-id=${film.id}>\n        <img class=\"film-poster\" src=\"https://image.tmdb.org/t/p/w500${\n          film.poster_path\n        }\" alt=\"poster\">\n        <h2 class=\"film-title\">${film.original_title}</h2>\n        <div class=\"film-info\">\n        <span class=\"film-details\">${film.genre_ids\n          .map(id => genres[id])\n          .join(', ')} | ${film.release_date.substr(0, 4)}</span>\n        </div>\n      </div>`;\n        return cardFilm;\n      } else {\n        const cardFilm = `\n      <div class=\"film-card\" data-id=${film.id}>\n        <img class=\"film-poster\" src=\"https://image.tmdb.org/t/p/w500${\n          film.poster_path\n        }\" alt=\"poster\">\n        <h2 class=\"film-title\">${film.original_title}</h2>\n        <div class=\"film-info\">\n        <span class=\"film-details\">${film.genre_ids\n          .slice(0, 2)\n          .map(id => genres[id])\n          .join(', ')}, Other | ${film.release_date.substr(0, 4)}</span>\n        </div>\n      </div>`;\n        return cardFilm;\n      }\n    })\n    .join('');\n\n     const galleryFilms = document.querySelector('.galleryfilms-js');\n    //  renderMarkup();\n     console.log(galleryFilms);\n     galleryFilms.innerHTML = createdElements;\n     \n}"],"names":["$2shzp","parcelRequire","$00d10e9a3443456a$export$be3a0ca764f9df2b","$7ee0f8f36bd0df6b$export$add40575555c273c","films","createdElements","results","map","film","genre_ids","length","id","poster_path","original_title","join","release_date","substr","slice","galleryFilms","document","querySelector","console","log","innerHTML","$3583b7d8092fdd31$var$queueButton","$3583b7d8092fdd31$var$watchedButton","$3583b7d8092fdd31$var$galleryFilms","$3583b7d8092fdd31$var$nomoviesimages","$3583b7d8092fdd31$var$apiInfoMovies","BASE_URL","API_KEY","constructor","this","page","async","film_Id","default","get","err","Error","message","$3583b7d8092fdd31$var$handleGetWatchedFilms","savedData","localStorage","getItem","classList","remove","contains","add","datagenre_ids","JSON","parse","fetchMovies","then","data","genres","genre","push","catch","error","window","addEventListener","filmData"],"version":3,"file":"index.8d001d6c.js.map"}