{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,S,aAIA,MAEMC,EAAcC,SAASC,cAAc,aACrCC,EAAgBF,SAASC,cAAc,eACvCE,EAAeH,SAASC,cAAc,YACtCG,EAAiBJ,SAASC,cAAc,QAEvCI,EAAYC,aAAaC,QAPN,cAShBC,EAAWC,KAAKC,MAAML,GAC5BM,QAAQC,IAAIJ,GAEhBG,QAAQC,IAAIR,GAEZO,QAAQC,IAAIT,GACZQ,QAAQC,IAAIb,GACZY,QAAQC,IAAIV,GAoBZ,MAAMW,EAAgB,IAlBtB,MACEC,GAAY,gCACZC,GAAW,mCAEXC,cACEC,KAAKC,KAAO,C,CAGdC,kBAAkBC,GAChB,IACI,aAAavB,EAAAwB,QAAMC,IAAI,sCAAsCF,aAAmBH,MAAKF,I,CAEvF,MAAOQ,GACP,MAAM,IAAIC,MAAMD,EAAIE,Q,IA0G1B,SAASC,IACPvB,EAAawB,UAAY,GAEvB,MAAMC,EAAYtB,aAAaC,QA5IT,cA8IhBsB,EAAWpB,KAAKC,MAAMkB,GAC5BjB,QAAQC,IAAIgB,GAERC,IAAa,IACbzB,EAAe0B,UAAUC,OAAO,aAGlChC,EAAY+B,UAAUE,SAAS,cACjCjC,EAAY+B,UAAUC,OAAO,aAE/B7B,EAAc4B,UAAUG,IAAI,aAC5B/B,EAAc4B,UAAUG,IAAI,cAC5BlC,EAAY+B,UAAUC,OAAO,cAE7B,IAAIG,EAAgB,GAChBC,EAAQ,CACVC,QAAS,IAGX,GAAIP,EACA,IACIzB,EAAe0B,UAAUG,IAAI,aAChCJ,EAASQ,KAAIC,IACZzB,EACG0B,YAAYD,GACZE,MAAK,EAACC,KAAEA,MACPP,EAAgBO,EAAKC,OAAOL,KAAIM,GAASA,EAAML,KAC/CG,EAAKG,UAAYV,EACjBO,EAAKC,OAAOL,KAAIM,GAASF,EAAKG,UAAUC,KAAKF,EAAML,MACnDH,EAAMC,QAAQS,KAAKJ,EAAK,IAEzBK,OAAMvB,IACLZ,QAAQC,IAAIW,EAAI,IAEjBwB,SAAQ,KAAM,EAAAC,EAAAC,cAAad,IAAO,G,CAEvC,MAAOe,GACPvC,QAAQuC,MAAM,oBAAqBA,EAAMzB,Q,EAmD/C0B,OAAOC,iBAAiB,OAAQ1B,GAChCxB,EAAckD,iBAAiB,QAAS1B,GACxC3B,EAAYqD,iBAAiB,SAhD7B,WACEjD,EAAawB,UAAY,GAEzB,MAAM0B,EAAY/C,aAAaC,QA1LP,SA2LlB+C,EAAW7C,KAAKC,MAAM2C,GAEA,IAApBC,EAASC,QAA6B,KAAbD,GAC3BlD,EAAe0B,UAAUC,OAAO,aAIlC7B,EAAc4B,UAAUE,SAAS,cACnC9B,EAAc4B,UAAUC,OAAO,aAEjChC,EAAY+B,UAAUG,IAAI,aAC1B/B,EAAc4B,UAAUC,OAAO,cAC/BhC,EAAY+B,UAAUG,IAAI,cAE1B,IAAIC,EAAgB,GAChBC,EAAQ,CACVC,QAAS,IAGX,GAAIkB,EACF,IACIA,EAASjB,KAAIC,IACbzB,EACG0B,YAAYD,GACZE,MAAK,EAACC,KAAEA,MACPP,EAAgBO,EAAKC,OAAOL,KAAIM,GAASA,EAAML,KAC/CG,EAAKG,UAAYV,EACjBO,EAAKC,OAAOL,KAAIM,GAASF,EAAKG,UAAUC,KAAKF,EAAML,MACnDH,EAAMC,QAAQS,KAAKJ,EAAK,IAGzBK,OAAMvB,IACLZ,QAAQC,IAAIW,EAAI,IAEjBwB,SAAQ,KAAM,EAAAC,EAAAC,cAAad,IAAO,G,CAEvC,MAAOe,GACPvC,QAAQuC,MAAM,oBAAqBA,EAAMzB,Q","sources":["src/get_localstorage_info.js"],"sourcesContent":["import axios from 'axios';\nimport { renderMarkup } from './render_markup';\n\n// import './js/render-markup.js';\nconst STORAGE_KEY_WATCH = 'watched_id';\nconst STORAGE_KEY_QUEUE = 'queue';\nconst queueButton = document.querySelector('.js_queue');\nconst watchedButton = document.querySelector('.js_watched');\nconst galleryFilms = document.querySelector('.gallery');\nconst nomoviesimages = document.querySelector('.img');\n\n const savedData = localStorage.getItem(STORAGE_KEY_WATCH);\n    \n    const filmData = JSON.parse(savedData);\n    console.log(filmData);\n\nconsole.log(nomoviesimages);\n\nconsole.log(galleryFilms);\nconsole.log(queueButton);\nconsole.log(watchedButton);\n\nclass ApiMovieSearch {\n  #BASE_URL = 'https://api.themoviedb.org/3/';\n  #API_KEY = '2bcb7fdd81c3309c5e646690433e3287';\n \n  constructor() {\n    this.page = 1;\n  }\n\n  async fetchMovies(film_Id) {\n    try {\n        return await axios.get(`https://api.themoviedb.org/3/movie/${film_Id}?api_key=${this.#API_KEY}`);\n        \n    } catch (err) {\n      throw new Error(err.message);\n    }\n  }\n}\n\nconst apiInfoMovies = new ApiMovieSearch();\n\n// function handleGetWatchedFilms() {\n//     galleryFilms.innerHTML = \"\";\n    \n//     const savedData = localStorage.getItem(STORAGE_KEY_WATCH);\n    \n//     const filmData = JSON.parse(savedData);\n\n//     if (filmData.length === 0) {\n//         nomoviesimages.classList.remove('is-hidden');\n//     }\n       \n    \n//         if (queueButton.classList.contains('is-active')) {\n//         queueButton.classList.remove('is-active');\n//         }\n//         watchedButton.classList.add('is-active');\n//         watchedButton.classList.add('btn-active');\n//        queueButton.classList.remove('btn-active');\n    \n//     let datagenre_ids = [];\n    \n//     let films = {\n//         results: [],\n//     };\n    \n//     if (filmData) {\n//             try {\n            \n//             // console.log(filmData);\n//             filmData.map((id) => {\n//                 apiInfoMovies\n//                     .fetchMovies(id)\n//                     .then(({ data }) => {\n//                         // console.log(data);\n//                         nomoviesimages.classList.add('is-hidden');\n//                         // data.genre_ids = data.genres;\n//                         datagenre_ids = data.genres.map(genre => genre.id);\n//                         data.genre_ids = datagenre_ids;\n//                         console.log(datagenre_ids)\n\n//                         films.results.push(data);\n//                         // console.log(films);\n                    \n//                         renderMarkup(films);\n                    \n//                         })\n//                     .catch(err => {\n//                         console.log(err)\n//                     })\n//             })\n//             }\n//         catch (error) {\n//             console.error(\"Get state error: \", error.message);\n//             }\n//         }\n// };\n\n// function handleGetQueueFilms() {\n//         galleryFilms.innerHTML = \"\";\n//         const savedData = localStorage.getItem(STORAGE_KEY_QUEUE);\n    \n//     if (watchedButton.classList.contains('is-active')) {\n//         watchedButton.classList.remove('is-active');\n//     }\n//     queueButton.classList.add('is-active');\n     \n//         let films = {\n//         results: [],\n//     };\n\n//     if (savedData) {\n//         try {\n//             const filmData = JSON.parse(savedData);\n//             console.log(filmData);\n            \n//             filmData.map((id) => {\n//                 apiInfoMovies\n//                     .fetchMovies(id)\n//                     .then(({ data }) => {\n//                         console.log(data);\n//                         data.genre_ids = data.genres;\n//                         films.results.push(data);\n//                         console.log(films);\n                    \n//                         renderMarkup(films);\n                    \n//                     })\n//                     .catch(err => {\n//                         console.log(err)\n//                     })\n//             })\n//         }\n//         catch (error) {\n//             console.error(\"Get state error: \", error.message);\n//     }\n//         }\n// };\n\n\nfunction handleGetWatchedFilms() {\n  galleryFilms.innerHTML = '';\n  \n    const savedData = localStorage.getItem(STORAGE_KEY_WATCH);\n    \n    const filmData = JSON.parse(savedData);\n    console.log(savedData);\n  \n    if (filmData === []) {\n        nomoviesimages.classList.remove('is-hidden');\n    }\n\n  if (queueButton.classList.contains('is-active')) {\n    queueButton.classList.remove('is-active');\n  }\n  watchedButton.classList.add('is-active');\n  watchedButton.classList.add('btn-active');\n  queueButton.classList.remove('btn-active');\n\n  let datagenre_ids = [];\n  let films = {\n    results: [],\n  };\n\n  if (filmData) {\n      try {\n          nomoviesimages.classList.add('is-hidden');\n       filmData.map(id => {\n        apiInfoMovies\n          .fetchMovies(id)\n          .then(({ data }) => {\n            datagenre_ids = data.genres.map(genre => genre.id);\n            data.genre_ids = datagenre_ids;\n            data.genres.map(genre => data.genre_ids.push(genre.id));\n            films.results.push(data);\n          })\n          .catch(err => {\n            console.log(err);\n          })\n          .finally(() => renderMarkup(films));\n      });\n    } catch (error) {\n      console.error('Get state error: ', error.message);\n    }\n  }\n}\n\nfunction handleGetQueueFilms() {\n  galleryFilms.innerHTML = '';\n\n  const savedData = localStorage.getItem(STORAGE_KEY_QUEUE);\n  const filmData = JSON.parse(savedData);\n\n      if (filmData.length === 0 || filmData === '') {\n        nomoviesimages.classList.remove('is-hidden');\n    }\n  \n    \n  if (watchedButton.classList.contains('is-active')) {\n    watchedButton.classList.remove('is-active');\n  }\n  queueButton.classList.add('is-active');\n  watchedButton.classList.remove('btn-active');\n  queueButton.classList.add('btn-active');\n\n  let datagenre_ids = [];\n  let films = {\n    results: [],\n  };\n\n  if (filmData) {\n    try {\n        filmData.map(id => {\n        apiInfoMovies\n          .fetchMovies(id)\n          .then(({ data }) => {\n            datagenre_ids = data.genres.map(genre => genre.id);\n            data.genre_ids = datagenre_ids;\n            data.genres.map(genre => data.genre_ids.push(genre.id));\n            films.results.push(data);\n            // console.log(films);\n          })\n          .catch(err => {\n            console.log(err);\n          })\n          .finally(() => renderMarkup(films));\n      });\n    } catch (error) {\n      console.error('Get state error: ', error.message);\n    }\n  }\n}\n\nwindow.addEventListener('load', handleGetWatchedFilms);\nwatchedButton.addEventListener('click', handleGetWatchedFilms);\nqueueButton.addEventListener('click', handleGetQueueFilms);\n\n"],"names":["$2shzp","parcelRequire","$3583b7d8092fdd31$var$queueButton","document","querySelector","$3583b7d8092fdd31$var$watchedButton","$3583b7d8092fdd31$var$galleryFilms","$3583b7d8092fdd31$var$nomoviesimages","$3583b7d8092fdd31$var$savedData","localStorage","getItem","$3583b7d8092fdd31$var$filmData","JSON","parse","console","log","$3583b7d8092fdd31$var$apiInfoMovies","BASE_URL","API_KEY","constructor","this","page","async","film_Id","default","get","err","Error","message","$3583b7d8092fdd31$var$handleGetWatchedFilms","innerHTML","savedData1","filmData1","classList","remove","contains","add","datagenre_ids","films","results","map","id","fetchMovies","then","data","genres","genre","genre_ids","push","catch","finally","$aTn7i","renderMarkup","error","window","addEventListener","savedData2","filmData2","length"],"version":3,"file":"myLibary.cdf49d60.js.map"}